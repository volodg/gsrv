
\/\/\/\/\/\/\/\/\/\/\/\/\/ Структура каталогов и назначение \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\

1. папка doc - содержит yaws скрипты web интерфейсов системы
2. папка ebin - здесь остальные исходники системы, сюда же компилируются erl файлы c помощью Emakefile
3. файл yaws.conf - пример настройки yaws

\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\ модули /\/\/\/\/\/\/\/\/\/\/\/\/\

I.   web интерфейсы yaws
II.  сервер
III. тесты функциональности
IV.  тесты нагрузок
V.   файлы общего назначения и настройки

/////////////////////////////// I. web интерфейсы yaws //////////////////////////////

Состоит из трех запросов

1. deal.yaws

Срипт для создания сделки.
Пример вызова - http://localhost:8000/deal.yaws?date=2234:234:234:324:34:234&instrument=echo2&price=10.6&amount=200

Параметры:
date - дата сделки в формате год:месяц:число:часы:минуты:секунды
instrument - имя инструмента, в нашем случае может быть echo1, echo2, ... echo10
price - цена, должнa быть больше 0
amount - размер сделки, должен быть больше 0

Результат сделки приходит в обычном текстовом формате

2. report.yaws

Подписка на отчеты о сделках.
Пример вызова - http://localhost:8000/report.yaws

Отчеты по сделкам приходят в обычном текстовом формате

3. test/random_deal.yaws

Срипт для создания случайной но валидной сделки.
Пример вызова - http://localhost:8000/test/random_deal.yaws

///////////////////////////// II. сервер ////////////////////////////////

Сотоит из

1. bn_server.erl

Диспетчер запросов - принимает deal запросы, валидирует их аргументы, отвечает за то какой дилер ( bn_dealer.erl ) обработает этот запрос.
каждому временному интервалу и инструменту соответствует свой дилер.
Следит за возможными сбоями в дилерах

2. bn_report.erl

Модуль отвечающий за рассылку отчетов. Поддерживает подписку, отписку по Pid. А так же за рассылку сообщений подписчикам.
Ставит монитор на Pid подписчика для того что бы отписать в случае завершения его работы.

3. bn_dealer.erl и bn_dealer_child.erl и альтернатива bn_dealer2.erl

Модуль отвечающий за обработку сделок по конкретному инструменту и одному временному промежутку заданному при старте этого процесса.
При завершении временного промежутка - отправляет отчет модулю bn_report.erl.

Данные отчета - максимальная минимальная цены и сумма всех сделок являются моноидами.
Это позволяет нам проводить все расчеты параллельно.

Таким образом модуль bn_dealer_child.erl принимает запросы на сделку, хранит промежуточные результаты и при завершении временного интервала
отдает свой частичный отчет родителю - bn_dealer.erl
Вычислительную сложность обработки сделки симулирует метод - timer:sleep(10).

Модуль родитель bn_dealer.erl принимает данные о сделках, распределяет запросы между пулом процессов bn_dealer_child.erl.
В конце временного интервала - собирает все отчеты со всех процессов пула и результирующий суммарный отчет отправляет модулю bn_report.erl

Альтернатива bn_dealer2.erl не паралелит запросы между детьми, создан для сравнения результатов тестов нагрузки с предыдущим решением bn_dealer.erl

4. bn_sup.erl
Супервизор модулей bn_server.erl и bn_report.erl, Используется для их запуска и перезапуска в случае сбоя перечисленных модулей.

///////////////////////////// III. тесты функциональности ////////////////////////////////

Скрипт selftest.erl

> selftest:run().

Запускает bn_server.erl и bn_report.erl, отправляет им запросы, проверяет ответы и отчеты.

///////////////////////////// IV.  тесты нагрузок ////////////////////////////////

Скрипт benchmark.erl

> benchmark:run().

Предполагается запуск в отдельной ноде, полагается на то что сервер запущен. Работает непосредственно с интерфейсами
bn_server.erl и bn_report.erl модулей. Порождает большое количество как бы трейдеров, где объём сделки каждого
равен единице. Количество удачно обработанных запросов проверяется по сумме сделок в отчете.

///////////////////////////// V.   файлы общего назначения и настройки ////////////////////////////////

1. bn_config.hrl

Содержит настройки системы:

SRV_NODE - имя ноды в которой запускается сервер
INSTRUMENTS - список инструментов
START_DATETIME - должен указывать дату начала обработки запросов, но для удобства эта дата начинается с момента запуска сервера
REPORT_DURATION_SEC - временной масштаб в секундах
REPORT_DURATION_NUM - дата окончания торгов определяется как START_DATETIME + REPORT_DURATION_SEC * REPORT_DURATION_NUM
DEALERS_PER_INSTRUMENT - определяет максимально допустимое количество процессов в пуле процессов дилера

-record(report, {...}). - структура отчета

-record(deal, {...}). - структура сделки

2. Emakefile

Файл для сборки всех исходников

3. datetime.erl

Код для работы с датами

4. bn_common.erl

Некоторый общий код для разных модулей
