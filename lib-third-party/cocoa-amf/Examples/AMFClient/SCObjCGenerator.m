//
//  SCObjCGenerator.m
//  CocoaAMF
//
//  Created by Marc Bauer on 03.05.09.
//  Copyright 2009 nesiumdotcom. All rights reserved.
//

#import "SCObjCGenerator.h"

@interface SCObjCGenerator (Private)
- (NSString *)_objCTypeForNode:(AMFDebugDataNode *)node needsRetain:(BOOL *)needsRetain;
- (NSString *)_encodeCommandForNode:(AMFDebugDataNode *)node;
- (NSString *)_decodeCommandForNode:(AMFDebugDataNode *)node;
@end

@implementation SCObjCGenerator

- (NSString *)stubCodeForDataNode:(AMFDebugDataNode *)node
{
	NSString *name = node.objectClassName;
	name = [name stringByReplacingOccurrencesOfString:@"::" withString:@"."];
	NSArray *parts = [name componentsSeparatedByString:@"."];
	NSString *className = [parts lastObject];

	NSMutableArray *ivars = [NSMutableArray array];
	NSMutableArray *properties = [NSMutableArray array];
	NSMutableArray *dealloc = [NSMutableArray array];
	NSMutableArray *synthesize = [NSMutableArray array];
	NSMutableArray *encode = [NSMutableArray array];
	NSMutableArray *decode = [NSMutableArray array];
	for (AMFDebugDataNode *subnode in node.children)
	{
		BOOL needsRetain;
		NSString *type = [self _objCTypeForNode:subnode needsRetain:&needsRetain];
		[ivars addObject:[NSString stringWithFormat:@"\t%@%@;", type, subnode.name]];
		[properties addObject:[NSString stringWithFormat:@"@property (nonatomic, %@) %@%@;", 
			(needsRetain ? @"retain" : @"assign"), type, subnode.name]];
		if (needsRetain)
			[dealloc addObject:[NSString stringWithFormat:@"\t[%@ release];", subnode.name]];
		[synthesize addObject:subnode.name];
		[encode addObject:[NSString stringWithFormat:@"\t[coder %@];", 
			[NSString stringWithFormat:[self _encodeCommandForNode:subnode], subnode.name, 
				[NSString stringWithFormat:@"@\"%@\"", subnode.name]]]];
		[decode addObject:[NSString stringWithFormat:@"\t\tself.%@ = [coder %@];", subnode.name, 
			[NSString stringWithFormat:[self _decodeCommandForNode:subnode], 
				[NSString stringWithFormat:@"@\"%@\"", subnode.name]]]];
	}

	return [NSString stringWithFormat:@"\
// Generated by CocoaAMF\n\
\n\
#import <Foundation/Foundation.h>\n\
\n\
@interface %@ : NSObject <NSCoding>\n\
{\n\
%@\n\
}\n\
%@\n\
@end\n\
\n\
\n\
\n\
@implementation %@\n\
\n\
@synthesize %@;\n\
\n\
- (id)initWithCoder:(NSCoder *)coder\n\
{\n\
	if (self = [super init])\n\
	{\n\
%@\n\
	}\n\
	return self;\n\
}\n\
\n\
- (void)encodeWithCoder:(NSCoder *)coder\n\
{\n\
%@\n\
}\n\
\n\
- (void)dealloc\n\
{\n\
%@\n\
	[super dealloc];\n\
}\n\
@end", className, [ivars componentsJoinedByString:@"\n"], [properties componentsJoinedByString:@"\n"], 
	className, [synthesize componentsJoinedByString:@", "], [decode componentsJoinedByString:@"\n"], 
	[encode componentsJoinedByString:@"\n"], [dealloc componentsJoinedByString:@"\n"]];
}

- (NSString *)_objCTypeForNode:(AMFDebugDataNode *)node needsRetain:(BOOL *)needsRetain
{
	*needsRetain = YES;
	if (node.objectClassName != nil)
		return [NSString stringWithFormat:@"%@ *", node.objectClassName];
	
	if (node.version == kAMF0Version)
	{
		switch (node.type)
		{
			case kAMF0NumberType:
				return @"NSNumber *";
			case kAMF0BooleanType:
				*needsRetain = NO;
				return @"BOOL ";
			case kAMF0StringType:
			case kAMF0LongStringType:
			case kAMF0XMLObjectType:
				return @"NSString *";
			case kAMF0ObjectType:
			case kAMF0ECMAArrayType:
			case kAMF0TypedObjectType:
				return @"NSDictionary *";
			case kAMF0StrictArrayType:
				return @"NSArray *";
			case kAMF0DateType:
				return @"NSDate *";
		}
	}
	else
	{
		switch (node.type)
		{
			case kAMF3FalseType:
			case kAMF3TrueType:
				*needsRetain = NO;
				return @"BOOL ";
			case kAMF3IntegerType:
			case kAMF3DoubleType:
				return @"NSNumber *";
			case kAMF3StringType:
			case kAMF3XMLDocType:
			case kAMF3XMLType:
				return @"NSString *";
			case kAMF3DateType:
				return @"NSDate *";
			case kAMF3ArrayType:
				return @"NSArray *";
			case kAMF3ObjectType:
				return @"NSDictionary *";
			case kAMF3ByteArrayType:
				return @"NSData *";
		}
	}
	return @"NSObject *";
}

- (NSString *)_encodeCommandForNode:(AMFDebugDataNode *)node
{
	if (node.objectClassName != nil)
		return @"encodeObject:%@ forKey:%@";
	
	if (node.version == kAMF0Version)
	{
		switch (node.type)
		{
			case kAMF0BooleanType:
				return @"encodeBool:%@ forKey:%@";
		}
	}
	else
	{
		switch (node.type)
		{
			case kAMF3FalseType:
			case kAMF3TrueType:
				return @"encodeBool:%@ forKey:%@";
		}
	}
	return @"encodeObject:%@ forKey:%@";
}

- (NSString *)_decodeCommandForNode:(AMFDebugDataNode *)node
{
	if (node.objectClassName != nil)
		return @"decodeObjectForKey:%@";
	
	if (node.version == kAMF0Version)
	{
		switch (node.type)
		{
			case kAMF0BooleanType:
				return @"decodeBoolForKey:%@";
		}
	}
	else
	{
		switch (node.type)
		{
			case kAMF3FalseType:
			case kAMF3TrueType:
				return @"decodeBoolForKey:%@";
		}
	}
	return @"decodeObjectForKey:%@";
}

@end
